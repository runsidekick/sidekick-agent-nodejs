import { BaseConfig, CaptureFrame, LogMessageDataReductionInfo, PropertyAccessClassification } from '../types';
import { LogLevel } from '../logger';

export const ConfigNames = {
    agent: {
        apiKey: 'SIDEKICK_APIKEY',
        logLevel: 'SIDEKICK_AGENT_LOG_LEVEL',
        disable: 'SIDEKICK_AGENT_DISABLE',
        silent: 'SIDEKICK_AGENT_SILENT',
        rejectOnStartup: 'SIDEKICK_AGENT_REJECT_ON_STARTUP',
    },
    broker: {
        host: 'SIDEKICK_AGENT_BROKER_HOST',
        port: 'SIDEKICK_AGENT_BROKER_PORT',
        client: 'SIDEKICK_AGENT_BROKER_CLIENT',
    },
    application: {
        tag: 'SIDEKICK_AGENT_APPLICATION_TAG',
        id: 'SIDEKICK_AGENT_APPLICATION_ID',
        instanceId: 'SIDEKICK_AGENT_APPLICATION_INSTANCE_ID',
        name: 'SIDEKICK_AGENT_APPLICATION_NAME',
        version: 'SIDEKICK_AGENT_APPLICATION_VERSION',
        stage: 'SIDEKICK_AGENT_APPLICATION_STAGE',
    },
    debugApi: {
        enableAsyncCallStack: 'SIDEKICK_AGENT_ENABLE_ASYNC_CALLSTACK',
        cleanupAsyncCallStackInterval: 'SIDEKICK_AGENT_CLEANUP_ASYNC_CALLSTACK_INTERVAL',
        resetV8Debugger: 'SIDEKICK_AGENT_RESET_V8_DEBUGGER',
        resetV8DebuggerThreshold: 'SIDEKICK_AGENT_RESET_V8_DEBUGGER_THRESHOLD',
    },
    scriptStore: {
        hashCheckEnable: 'SIDEKICK_AGENT_HASH_CHECK_ENABLE',
        whilelistModule: 'SIDEKICK_AGENT_WHILELIST_MODULE',
        disablePositionCache: 'SIDEKICK_AGENT_DISABLE_POSITION_CACHE',
        prefix: 'SIDEKICK_AGENT_SCRIPT_PREFIX',
    },
    rateLimit: {
        inMinute: 'SIDEKICK_AGENT_RATE_LIMIT_IN_MINUTE',
    },
    capture: {
        maxFrames: 'SIDEKICK_AGENT_MAX_FRAMES',
        maxExpandFrames: 'SIDEKICK_AGENT_MAX_EXPAND_FRAMES',
        maxProperties: 'SIDEKICK_AGENT_MAX_PROPERTIES',
        maxParseDepth: 'SIDEKICK_AGENT_MAX_PARSE_DEPTH',
        propertyAccessClassification: 'SIDEKICK_AGENT_PROPERTY_ACCESS_CLASSIFICATION',
    },
    sourceCode: {
        minified: 'SIDEKICK_AGENT_SOURCE_CODE_MINIFIED',
    },
    taskExecutionQueue : {
        concurrency: 'SIDEKICK_AGENT_TASK_EXECUTION_QUEUE_CONCURRENCY',
        maxSize: 'SIDEKICK_AGENT_TASK_EXECUTION_MAX_SIZE',
    },
    dataReduction: {
        captureFrame: 'captureFrame',
        logMessage: 'logMessage',
    },
    errorCollection: {
        enable: 'SIDEKICK_AGENT_ERROR_COLLECTION_ENABLE',
        captureFrame: 'SIDEKICK_AGENT_ERROR_COLLECTION_CAPTURE_FRAME',
        rateLimit: {
            pointInMinute: 'SIDEKICK_AGENT_ERROR_COLLECTION_RATE_LIMIT_POINT_IN_MINUTE',
            totalInMinute: 'SIDEKICK_AGENT_ERROR_COLLECTION_RATE_LIMIT_TOTAL_IN_MINUTE',
        }
    }
};

export const EditableConfigNames: { [key: string]: string } = {
    silent: ConfigNames.agent.silent,
    maxFrames: ConfigNames.capture.maxFrames,
    maxExpandFrames: ConfigNames.capture.maxExpandFrames,
    maxProperties: ConfigNames.capture.maxProperties,
    maxParseDepth: ConfigNames.capture.maxParseDepth,
    errorCollectionEnable: ConfigNames.errorCollection.enable,
    errorCollectionEnableCaptureFrame: ConfigNames.errorCollection.captureFrame,
}

export interface SidekickConfig extends BaseConfig {
    /**
     * Sidekick api key.
     * You can set api key with SIDEKICK_APIKEY environment variable instead of setting `apiKey` field.
     * ``required | SIDEKICK_APIKEY environment variable``
     */
    apiKey?: string;
    /**
     * Agent log level.
     * ``default info``
     */
    logLevel?: LogLevel;
    /**
     * Disable agent.
     * ``default false``
     */
    disable?: boolean,
    /**
     * Sidekick broker host address.
     * ``default Sidekick broker host``
     */
    brokerHost?: string;
    /**
     * Sidekick broker port address.
     * ``default Sidekick broker port``
     */
    brokerPort?: number;
    /**
     * Sidekick broker client.
     * ``default Logged in user``
     */
    brokerClient?: string;
    /**
     * Application identifier.
     * ``default Generated by agent``
     */
    applicationId?: string;
    /**
     * Application name.
     * ``default Empty string``
     */
    applicationName?: string;
    /**
     * Application instance identifier.
     * ``default Generated by agent``
     */
    applicationInstanceId?: string;
    /**
     * Application version.
     * ``default Empty string``
     */
    applicationVersion?: string;
    /**
     * Application stage.
     * ``default Empty string``
     */
    applicationStage?: string;
    /**
     * Application tag.
     * ``default None``
     */
    applicationTag?: { [key: string]: any };
    /**
     * Max frames: Used for limiting call stack.
     * ``default 20``
     */
    maxFrames?: number,
    /**
     * Max expand frames: Used for limiting detailed call stack.
     * ``default 1``
     */
    maxExpandFrames?: number,
    /**
     * Max properties: Used for limiting number of property will captured. 
     * ``default 10``
     */
    maxProperties?: number,

    /**
     * Max parse depth: Used for limiting capturing depth. 
     * ``default 3``
     */
    maxParseDepth?: number,

    /**
     * Property Access Classification: Set enumerability and ownership of properties
     * ``default ENUMERABLE-OWN``
     */
    propertyAccessClassification?: PropertyAccessClassification,

    /**
     * Reject on startup: Stop rejection on startup promise. 
     * Default is false for avoid to unhandled promise rejection on startup.
     * If you set to true, you need to handle rejection of promise by self.
     * ``default false``
     */
    rejectOnStartup?: boolean,

    /**
     * Script prefix: Append prefix for scripts (debug files)
     * ``default None``
     */
    scriptPrefix?: string,

    /**
     * Capture frame data reduction callback.
     * Callback will trigger when agent try to prepare tracepoint data.
     * Data can manipulate and return.
      * Attention: If return equals to undefined log message process will be discarded.
     * ``default None``
     */
     captureFrameDataReductionCallback?: (captureFrames: CaptureFrame[]) => CaptureFrame[] | undefined,

     /**
       * Log message reduction callback.
       * Callback will trigger when agent try to prepare logpoint data.
       * Attention: If return equals to undefined log message process will be discarded.
       * ``default None``
       */
     logMessageDataReductionCallback?: (
         logMessageDataReductionInfo: LogMessageDataReductionInfo,
         locals: { [key: string]: any },
         ) => string | undefined,

    /**
     * Error Collection Enable: Enable error collection
     * ``default false``
     */
    errorCollectionEnable?: boolean,

    /**
     * Error Collection Capture Frame Enable: Enable error collection capture frame
     * ``default false``
     */
    errorCollectionEnableCaptureFrame?: boolean,
};